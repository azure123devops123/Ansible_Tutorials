####################################################################################################

# - name: Current Working Directory
#   shell: pwd
#   register: path
# - debug: msg="{{ path.stdout }}"

# - name: Current User
#   shell: whoami
#   register: user
# - debug: msg="{{ user.stdout }}"

# - name: Host Name
#   shell: hostname
#   register: hostname_result
# - debug: msg="{{ hostname_result.stdout }}"

####################################################################################################

# # FIVE GIT TASKS:
# - name: Git Current Version
#   shell: git --version
#   register: current_version
# - debug: msg="{{ current_version.stdout }}"  # git version 2.42.0

# - name: Install New Git Version
#   # shell: brew install git
#   package: name={{item}} state=present
#   with_items:
#     - git

# - name: Git New Version
#   shell: git --version
#   register: new_version
# - debug: msg="{{ new_version.stdout }}"    # git version 2.44.0

####################################################################################################

# # FIVE DOCKER TASKS:
# - name: DOCKER Current Version
#   shell: docker --version
#   register: current_version
# - debug: msg="{{ current_version.stdout }}"  # Docker version 25.0.3, build 4debf41

# - name: Install New DOCKER Version
#   # shell: brew install docker
#   package: name={{item}} state=present
#   with_items:
#     - docker

# - name: DOCKER New Version
#   shell: docker --version
#   register: new_version
# - debug: msg="{{ new_version.stdout }}"    # Docker version 26.1.0, build 9714adc6c7

####################################################################################################

# # FIVE ANSIBLE TASKS:
# - name: ANSIBLE Current Version
#   shell: ansible --version
#   register: current_version
# - debug: msg="{{ current_version.stdout }}"  # ansible [core 2.16.4]

# - name: Install New ANSIBLE Version
#   # shell: brew install ansible
#   package: name={{item}} state=present
#   with_items:
#     - ansible

# - name: ANSIBLE New Version
#   shell: ansible --version
#   register: new_version
# - debug: msg="{{ new_version.stdout }}"    # ansible [core 2.16.4]

# ####################################################################################################

# # FIVE TERRAFORM TASKS:
# - name: TERRAFORM Current Version
#   shell: terraform --version
#   register: current_version
# - debug: msg="{{ current_version.stdout }}"  # Terraform v1.5.5

# - name: Install New TERRAFORM Version
#   # shell: brew install terraform
#   package: name={{item}} state=present
#   with_items:
#     - terraform

# - name: TERRAFORM New Version
#   shell: terraform --version
#   register: new_version
# - debug: msg="{{ new_version.stdout }}"    # Terraform v1.5.5

#####################################################################################################

# # # FIVE Kubernetes TASKS: DOES NOT WORK
# # - name: Kubernetes Current Version
# #   shell: kubectl version --short # kubectl version --output=yaml
# #   register: current_version
# # - debug: msg="{{ current_version.stdout }}"  # clientVersion: major: "1" minor: "27"

# - name: Install New Kubernetes Version
#   # shell: brew install kubectl
#   package: name={{item}} state=present
#   with_items:
#     - kubectl

# # - name: Kubernetes New Version DOES NOT WORK
# #   shell: kubectl version --output=yaml
# #   register: new_version
# # - debug: msg="{{ new_version.stdout }}"    # clientVersion: major: "1" minor: "27"

######################################### Install tools on all remote servers and also on workstation ##################################

######### INSTALL TOOLS ON MACOS (LOCAL SYSTEM), UBUNTU AND AMAZON LINUX (REMOTE SERVERS) #########

# # Install Tools on MACOS (LOCAL SYSTEM):
# - name: Install Tools on MacOS
#   # connection: local
#   # become_user: muhammadjabir
#   package: name={{item}} state=latest
#   with_items:
#     - git
#     - ansible
#     - kubectl
#     - terraform
#     - curl
#     - python3
#     - openjdk                 # Verify Your Installation: java --version
#     # - docker
#   when: ansible_distribution == "MacOSX"

# # Install Tools on UBUNTU (REMOTE SERVER):
# - name: Install tools on Ubuntu Server
#   package: name={{item}} state=latest
#   with_items:
#     - git
#     - ansible
#     - docker.io
#     - curl
#     - python3
#     - openjdk-19-jdk-headless # Verify Your Installation: java --version
#     - firewalld               # Verify Your Installation ( By default Active: active (running) ): systemctl status firewalld
#     # - terraform   # (NOT WORKING)
#     # - kubectl     # (NOT WORKING)
#   when: ansible_distribution == "Ubuntu"

# # Install Tools on AMAZON LINUX (REMOTE SERVER):
# - name: Install tools on Amazon Linux Server
#   package: name={{item}} state=latest
#   with_items:
#     - git
#     - ansible
#     - docker
#     - python3
#     - java-1.8.0-amazon-corretto-devel    # Amazon Corretto 8 for Amazon Linux 2 and Amazon Linux 2023
#     - firewalld                           # Verify Your Installation ( By default Active: inactive (dead) ) : systemctl status firewalld
#     # - curl       # (NOT WORKING)
#     # - terraform  # (NOT WORKING)
#     # - kubectl    # (NOT WORKING)
#   when: ansible_distribution == "Amazon"


# Verify Installation of tools
- name: Verify Installation of tools
  # shell: git --version && docker --version && python3 --version && java --version && ansible --version
  # loop: ["git --version","ansible --version","docker --version","python3 --version","java --version"]
  command: var=item
  with_items:
    - echo "git --version"
    - echo "ansible --version"
    - echo "docker --version"
    - echo "python3 --version"
    - echo "java --version"
    # - curl       # (NOT WORKING)
    # - terraform  # (NOT WORKING)
    # - kubectl    # (NOT WORKING)
#   register: tools_versions_result
# - debug: var=tools_versions_result.stdout_lines


# 2.  IMPORTANT - VERSION CHECKING COMMANDS
#  git --version
#  terraform --version
#  kubectl --version --output=yaml
#  ansible --version
#  docker --version
#  curl --version
#  python3 --version
#  java --version on MacOSX and Ubuntu but java -version on amazon linux
#  systemctl status firewalld

# ############################################### Manage arbitrary ports/services with firewalld ##################################################

# # Install ansible.posix Collection on All (REMOTE SERVERS)
# - name: Install ansible.posix Collection on All Servers
#   shell: ansible-galaxy collection install ansible.posix
#   changed_when: false
#   when: ansible_distribution in ["Amazon","Ubuntu"]
#   # Verify Your Installation on Target Machine: ansible-galaxy collection list


# # Ensure Uncomplicated Firewall ufw remove first before install firewalld on (REMOTE SERVERS)   
# - name: Ensure Remove ufw Uncomplicated Firewall
#   package: name=ufw state=absent
#   when: ansible_distribution in ["Amazon","Ubuntu"]     
# # Verify the service on Target Machine: ufw --version


# # Ensure firewalld is enabled and running on All (REMOTE SERVERS)
# - name: Ensure firewalld is enabled and running
#   service: name=firewalld state=started enabled=yes
#   when: ansible_distribution in ["Amazon","Ubuntu"]     
# # Verify the service on Target Machine: systemctl status firewalld


# # Install Nginx on All (REMOTE SERVERS)  
# - name: Install Nginx
#   package: name=nginx state=present
#   when: ansible_distribution in ["Amazon","Ubuntu"]
# # Verify the Packages on Target Machine: dnf info nginx    -> MUST BE: Installed Packages


# # Ensure nginx is enabled and running on All (REMOTE SERVERS)
# - name: Ensure nginx is enabled and running
#   service: name=nginx state=started
#   when: ansible_distribution in ["Amazon","Ubuntu"]
# # Verify the service on Target Machine: systemctl status nginx

# # Redirect port 8443 to 80 with Rich Rule
# - name: Redirect port 8443 to 80 with Rich Rule
#   ansible.posix.firewalld:
#     rich_rule: rule family=ipv4 forward-port port=8443 protocol=tcp to-port=80
#     zone: public
#     permanent: true
#     immediate: true
#     state: enabled
#   when: ansible_distribution in ["Amazon","Ubuntu"]
# # Verify on Target Machine:  sudo firewall-cmd --list-ports  ->  ports: 8443/tcp
# # Check in the browser: 13.210.217.180:8443   and also 3.107.1.205:8443    (NOTE:- IT TAKES A LITTLE BIT OF TIME WHEN WE CHECK IN THE BROWSER)'


# # Enable Firewall for http and https services on All (REMOTE SERVERS)
# - name: Firewall Rules
#   ansible.posix.firewalld: service="{{ item }}" state=enabled permanent=true  immediate=true
#   with_items: 
#     - http
#     - https
#   when: ansible_distribution in ["Amazon","Ubuntu"]
#   # Verify on Target Machine:  sudo firewall-cmd --list-services  ->  services: dhcpv6-client http https ssh


# # Permit/Allow traffic in default zone on 3306/tcp on All (REMOTE SERVERS)
# - name: Firewall Rules - Permit traffic in default zone on port 3306/tcp
#   ansible.posix.firewalld: port="{{ item }}/tcp" state=enabled permanent=true  immediate=true
#   with_items:
#     - 3306  # Used in below task
#   when: ansible_distribution in ["Amazon","Ubuntu"]
#   # Verify on Target Machine:  sudo firewall-cmd --list-ports  ->  ports: 3306/tcp


# # Ensure firewalld is restarted on All (REMOTE SERVERS)
# - name: Ensure firewalld is restarted
#   service: name=firewalld state=restarted enabled=yes
#   changed_when: false
#   when: ansible_distribution in ["Amazon","Ubuntu"]     
# # Verify the service on Target Machine: systemctl status firewalld


# # IMPORTANT COMMANDS #:

# # # IMPORTANT: firewall-cmd is the command line client of the firewalld daemon:
# # sudo firewall-cmd --state                 # Verify the status of the firewall: RUNNING
# # sudo firewall-cmd --list-all
# # sudo firewall-cmd --list-services
# # sudo firewall-cmd --list-ports

# #####################################################################################################

